/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Brake extends Device {
  private transient long swigCPtr;

  protected Brake(long cPtr, boolean cMemoryOwn) {
    super(wrapperJNI.Brake_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Brake obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Brake obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        wrapperJNI.delete_Brake(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  private Motor motor;
  private PositionSensor positionSensor;

  public Motor getMotor() {
    if (motor == null)
      motor = (Motor)Robot.getDevice(getMotorTag());
    return motor;
  }
  public PositionSensor getPositionSensor() {
    if (positionSensor == null)
      positionSensor = (PositionSensor)Robot.getDevice(getPositionSensorTag());
    return positionSensor;
  }

  public Brake(String name) {
    this(wrapperJNI.new_Brake__SWIG_0(name), true);
  }

  public Brake(int tag) {
    this(wrapperJNI.new_Brake__SWIG_1(tag), true);
  }

  public int getType() {
    return wrapperJNI.Brake_getType(swigCPtr, this);
  }

  public void setDampingConstant(double dampingConstant) {
    wrapperJNI.Brake_setDampingConstant(swigCPtr, this, dampingConstant);
  }

  private Motor getMotorPrivate() {
    long cPtr = wrapperJNI.Brake_getMotorPrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new Motor(cPtr, false);
  }

  private PositionSensor getPositionSensorPrivate() {
    long cPtr = wrapperJNI.Brake_getPositionSensorPrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new PositionSensor(cPtr, false);
  }

  public int getMotorTag() {
    return wrapperJNI.Brake_getMotorTag(swigCPtr, this);
  }

  public int getPositionSensorTag() {
    return wrapperJNI.Brake_getPositionSensorTag(swigCPtr, this);
  }

  // Type 
  public final static int ROTATIONAL = 0;
  public final static int LINEAR = ROTATIONAL + 1;

  public final static int ANGULAR = 0;

}
