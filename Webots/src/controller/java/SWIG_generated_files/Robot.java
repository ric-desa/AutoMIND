/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Robot {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Robot(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Robot obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Robot obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        wrapperJNI.delete_Robot(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  static private Device[] devices = null;
  private Joystick joystick = new Joystick();
  private Keyboard keyboard = new Keyboard();
  private Mouse mouse = new Mouse();

  protected Accelerometer createAccelerometer(int tag) {
    return new Accelerometer(tag);
  }

  public Accelerometer getAccelerometer(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.ACCELEROMETER))
      return null;
    return (Accelerometer)getOrCreateDevice(tag);
  }

  protected Altimeter createAltimeter(int tag) {
    return new Altimeter(tag);
  }

  public Altimeter getAltimeter(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.ALTIMETER))
      return null;
    return (Altimeter)getOrCreateDevice(tag);
  }

  protected Brake createBrake(int tag) {
    return new Brake(tag);
  }

  public Brake getBrake(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.BRAKE))
      return null;
    return (Brake)getOrCreateDevice(tag);
  }

  protected Camera createCamera(int tag) {
    return new Camera(tag);
  }

  public Camera getCamera(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.CAMERA))
      return null;
    return (Camera)getOrCreateDevice(tag);
  }

  protected Compass createCompass(int tag) {
    return new Compass(tag);
  }

  public Compass getCompass(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.COMPASS))
      return null;
    return (Compass)getOrCreateDevice(tag);
  }

  protected Connector createConnector(int tag) {
    return new Connector(tag);
  }

  public Connector getConnector(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.CONNECTOR))
      return null;
    return (Connector)getOrCreateDevice(tag);
  }

  public Device getDevice(String name) {
    int tag = getDeviceTagFromName(name);
    return getOrCreateDevice(tag);
  }

  protected Display createDisplay(int tag) {
    return new Display(tag);
  }

  public Display getDisplay(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.DISPLAY))
      return null;
    return (Display)getOrCreateDevice(tag);
  }

  protected DistanceSensor createDistanceSensor(int tag) {
    return new DistanceSensor(tag);
  }

  public DistanceSensor getDistanceSensor(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.DISTANCE_SENSOR))
      return null;
    return (DistanceSensor)getOrCreateDevice(tag);
  }

  protected Emitter createEmitter(int tag) {
    return new Emitter(tag);
  }

  public Emitter getEmitter(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.EMITTER))
      return null;
    return (Emitter)getOrCreateDevice(tag);
  }

  protected GPS createGPS(int tag) {
    return new GPS(tag);
  }

  public GPS getGPS(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.GPS))
      return null;
    return (GPS)getOrCreateDevice(tag);
  }

  protected Gyro createGyro(int tag) {
    return new Gyro(tag);
  }

  public Gyro getGyro(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.GYRO))
      return null;
    return (Gyro)getOrCreateDevice(tag);
  }

  protected InertialUnit createInertialUnit(int tag) {
    return new InertialUnit(tag);
  }

  public InertialUnit getInertialUnit(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.INERTIAL_UNIT))
      return null;
    return (InertialUnit)getOrCreateDevice(tag);
  }

  public Joystick getJoystick() {
    return joystick;
  }

  public Keyboard getKeyboard() {
    return keyboard;
  }

  protected LED createLED(int tag) {
    return new LED(tag);
  }

  public LED getLED(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.LED))
      return null;
    return (LED)getOrCreateDevice(tag);
  }

  protected Lidar createLidar(int tag) {
    return new Lidar(tag);
  }

  public Lidar getLidar(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.LIDAR))
      return null;
    return (Lidar)getOrCreateDevice(tag);
  }

  protected LightSensor createLightSensor(int tag) {
    return new LightSensor(tag);
  }

  public LightSensor getLightSensor(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.LIGHT_SENSOR))
      return null;
    return (LightSensor)getOrCreateDevice(tag);
  }

  protected Motor createMotor(int tag) {
    return new Motor(tag);
  }

  public Motor getMotor(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.LINEAR_MOTOR) && !Device.hasType(tag, Node.ROTATIONAL_MOTOR))
      return null;
    return (Motor)getOrCreateDevice(tag);
  }

  public Mouse getMouse() {
    return mouse;
  }

  protected Pen createPen(int tag) {
    return new Pen(tag);
  }

  public Pen getPen(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.PEN))
      return null;
    return (Pen)getOrCreateDevice(tag);
  }

  protected PositionSensor createPositionSensor(int tag) {
    return new PositionSensor(tag);
  }

  public PositionSensor getPositionSensor(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.POSITION_SENSOR))
      return null;
    return (PositionSensor)getOrCreateDevice(tag);
  }

  protected Radar createRadar(int tag) {
    return new Radar(tag);
  }

  public Radar getRadar(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.RADAR))
      return null;
    return (Radar)getOrCreateDevice(tag);
  }

  protected RangeFinder createRangeFinder(int tag) {
    return new RangeFinder(tag);
  }

  public RangeFinder getRangeFinder(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.RANGE_FINDER))
      return null;
    return (RangeFinder)getOrCreateDevice(tag);
  }

  protected Receiver createReceiver(int tag) {
    return new Receiver(tag);
  }

  public Receiver getReceiver(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.RECEIVER))
      return null;
    return (Receiver)getOrCreateDevice(tag);
  }

  protected Skin createSkin(int tag) {
    return new Skin(tag);
  }

  public Skin getSkin(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.SKIN))
      return null;
    return (Skin)getOrCreateDevice(tag);
  }

  protected Speaker createSpeaker(int tag) {
    return new Speaker(tag);
  }

  public Speaker getSpeaker(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.SPEAKER))
      return null;
    return (Speaker)getOrCreateDevice(tag);
  }

  protected TouchSensor createTouchSensor(int tag) {
    return new TouchSensor(tag);
  }

  public TouchSensor getTouchSensor(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.TOUCH_SENSOR))
      return null;
    return (TouchSensor)getOrCreateDevice(tag);
  }

  protected VacuumGripper createVacuumGripper(int tag) {
    return new VacuumGripper(tag);
  }

  public VacuumGripper getVacuumGripper(String name) {
    int tag = getDeviceTagFromName(name);
    if (!Device.hasType(tag, Node.VACUUM_GRIPPER))
      return null;
    return (VacuumGripper)getOrCreateDevice(tag);
  }

  public Device getDeviceByIndex(int index) {
    return getOrCreateDevice(getDeviceTagFromIndex(index));
  }

  static public Device getDevice(int tag) {
    if (tag == 0 || devices == null || tag >= devices.length)
      return null;
    return devices[tag];
  }

  private Device getOrCreateDevice(int tag) {
    if (tag == 0)
      return null;

    int count = getNumberOfDevices();
    // if new devices have been added, then count is greater than devices.length
    // deleted devices are not removed from the C API list and don't affect the number of devices
    if (devices != null && devices.length == count + 1 && tag < devices.length)
        return devices[tag];

    // (re-)initialize devices list
    if (tag > count)
        return null;
    devices = new Device[count + 1];
    for (int i = 0; i < count; i++) {
      int otherTag = getDeviceTagFromIndex(i);
      switch(getDeviceTypeFromTag(otherTag)) {
        case Node.ACCELEROMETER:    devices[otherTag] = createAccelerometer(otherTag); break;
        case Node.ALTIMETER:        devices[otherTag] = createAltimeter(otherTag); break;
        case Node.BRAKE:            devices[otherTag] = createBrake(otherTag); break;
        case Node.CAMERA:           devices[otherTag] = createCamera(otherTag); break;
        case Node.COMPASS:          devices[otherTag] = createCompass(otherTag); break;
        case Node.CONNECTOR:        devices[otherTag] = createConnector(otherTag); break;
        case Node.DISPLAY:          devices[otherTag] = createDisplay(otherTag); break;
        case Node.DISTANCE_SENSOR:  devices[otherTag] = createDistanceSensor(otherTag); break;
        case Node.EMITTER:          devices[otherTag] = createEmitter(otherTag); break;
        case Node.GPS:              devices[otherTag] = createGPS(otherTag); break;
        case Node.GYRO:             devices[otherTag] = createGyro(otherTag); break;
        case Node.INERTIAL_UNIT:    devices[otherTag] = createInertialUnit(otherTag); break;
        case Node.LED:              devices[otherTag] = createLED(otherTag); break;
        case Node.LIDAR:            devices[otherTag] = createLidar(otherTag); break;
        case Node.LIGHT_SENSOR:     devices[otherTag] = createLightSensor(otherTag); break;
        case Node.LINEAR_MOTOR:
        case Node.ROTATIONAL_MOTOR: devices[otherTag] = createMotor(otherTag); break;
        case Node.PEN:              devices[otherTag] = createPen(otherTag); break;
        case Node.POSITION_SENSOR:  devices[otherTag] = createPositionSensor(otherTag); break;
        case Node.RADAR:            devices[otherTag] = createRadar(otherTag); break;
        case Node.RANGE_FINDER:     devices[otherTag] = createRangeFinder(otherTag); break;
        case Node.RECEIVER:         devices[otherTag] = createReceiver(otherTag); break;
        case Node.SKIN:             devices[otherTag] = createSkin(otherTag); break;
        case Node.SPEAKER:          devices[otherTag] = createSpeaker(otherTag); break;
        case Node.TOUCH_SENSOR:     devices[otherTag] = createTouchSensor(otherTag); break;
        case Node.VACUUM_GRIPPER:   devices[otherTag] = createVacuumGripper(otherTag); break;
        default:                    devices[otherTag] = null; break;
      }
    }
    return devices[tag];
  }

  public Robot() {
    this(wrapperJNI.new_Robot(), true);
  }

  public int step(int duration) {
    return wrapperJNI.Robot_step(swigCPtr, this, duration);
  }

  public int stepBegin(int duration) {
    return wrapperJNI.Robot_stepBegin(swigCPtr, this, duration);
  }

  public int stepEnd() {
    return wrapperJNI.Robot_stepEnd(swigCPtr, this);
  }

  public int waitForUserInputEvent(int event_type, int timeout) {
    return wrapperJNI.Robot_waitForUserInputEvent(swigCPtr, this, event_type, timeout);
  }

  public String getName() {
    return wrapperJNI.Robot_getName(swigCPtr, this);
  }

  public String getUrdf(String prefix) {
    return wrapperJNI.Robot_getUrdf__SWIG_0(swigCPtr, this, prefix);
  }

  public String getUrdf() {
    return wrapperJNI.Robot_getUrdf__SWIG_1(swigCPtr, this);
  }

  public double getTime() {
    return wrapperJNI.Robot_getTime(swigCPtr, this);
  }

  public String getModel() {
    return wrapperJNI.Robot_getModel(swigCPtr, this);
  }

  public String getCustomData() {
    return wrapperJNI.Robot_getCustomData(swigCPtr, this);
  }

  public void setCustomData(String data) {
    wrapperJNI.Robot_setCustomData(swigCPtr, this, data);
  }

  public int getMode() {
    return wrapperJNI.Robot_getMode(swigCPtr, this);
  }

  public void setMode(int arg0, String arg1) {
    wrapperJNI.Robot_setMode(swigCPtr, this, arg0, arg1);
  }

  public boolean getSupervisor() {
    return wrapperJNI.Robot_getSupervisor(swigCPtr, this);
  }

  public boolean getSynchronization() {
    return wrapperJNI.Robot_getSynchronization(swigCPtr, this);
  }

  public String getProjectPath() {
    return wrapperJNI.Robot_getProjectPath(swigCPtr, this);
  }

  public String getWorldPath() {
    return wrapperJNI.Robot_getWorldPath(swigCPtr, this);
  }

  public double getBasicTimeStep() {
    return wrapperJNI.Robot_getBasicTimeStep(swigCPtr, this);
  }

  public int getNumberOfDevices() {
    return wrapperJNI.Robot_getNumberOfDevices(swigCPtr, this);
  }

  private Device getDeviceByIndexPrivate(int index) {
    long cPtr = wrapperJNI.Robot_getDeviceByIndexPrivate(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Device(cPtr, false);
  }

  public void batterySensorEnable(int samplingPeriod) {
    wrapperJNI.Robot_batterySensorEnable(swigCPtr, this, samplingPeriod);
  }

  public void batterySensorDisable() {
    wrapperJNI.Robot_batterySensorDisable(swigCPtr, this);
  }

  public int batterySensorGetSamplingPeriod() {
    return wrapperJNI.Robot_batterySensorGetSamplingPeriod(swigCPtr, this);
  }

  public double batterySensorGetValue() {
    return wrapperJNI.Robot_batterySensorGetValue(swigCPtr, this);
  }

  public void wwiSendText(String text) {
    wrapperJNI.Robot_wwiSendText(swigCPtr, this, text);
  }

  public String wwiReceiveText() {
    return wrapperJNI.Robot_wwiReceiveText(swigCPtr, this);
  }

  public String getData() {
    return wrapperJNI.Robot_getData(swigCPtr, this);
  }

  public void setData(String data) {
    wrapperJNI.Robot_setData(swigCPtr, this, data);
  }

  public static Device getDeviceFromTag(int tag) {
    long cPtr = wrapperJNI.Robot_getDeviceFromTag(tag);
    return (cPtr == 0) ? null : new Device(cPtr, false);
  }

  private static int getDeviceTypeFromTag(int tag) {
    return wrapperJNI.Robot_getDeviceTypeFromTag(tag);
  }

  private static String getDeviceNameFromTag(int tag) {
    return wrapperJNI.Robot_getDeviceNameFromTag(tag);
  }

  private static int getDeviceTagFromIndex(int index) {
    return wrapperJNI.Robot_getDeviceTagFromIndex(index);
  }

  public static int getDeviceTagFromName(String name) {
    return wrapperJNI.Robot_getDeviceTagFromName(name);
  }

  // Mode 
  public final static int MODE_SIMULATION = 0;
  public final static int MODE_CROSS_COMPILATION = MODE_SIMULATION + 1;
  public final static int MODE_REMOTE_CONTROL = MODE_CROSS_COMPILATION + 1;

  // UserInputEvent 
  public final static int EVENT_QUIT = -1;
  public final static int EVENT_NO_EVENT = 0;
  public final static int EVENT_MOUSE_CLICK = 1;
  public final static int EVENT_MOUSE_MOVE = 2;
  public final static int EVENT_KEYBOARD = 4;
  public final static int EVENT_JOYSTICK_BUTTON = 8;
  public final static int EVENT_JOYSTICK_AXIS = 16;
  public final static int EVENT_JOYSTICK_POV = 32;

}
